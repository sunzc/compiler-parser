#define prt(x) cout << x << endl
prt("anyEvent");
prt("Assignment");
prt("AssignStmt");
prt("ClassDecl");
prt("CompoundStmt");
prt("EventDecl");
prt("EventFormalParam");
prt("EventFormalParam");
prt("!EventPat");
prt("(EventPat)");
prt("EventPat **");
prt("EventPat : EventPat");
prt("EventPat \\/ EventPat");
prt("~Expr");
prt("-Expr");
prt("!Expr");
prt("(Expr)");
prt("Expr ^ Expr");
prt("Expr << Expr");
prt("Expr <= Expr");
prt("Expr < Expr");
prt("Expr == Expr");
prt("Expr >= Expr");
prt("Expr >> Expr");
prt("Expr > Expr");
prt("Expr || Expr");
prt("Expr | Expr");
prt("Expr - Expr");
prt("Expr != Expr");
prt("Expr / Expr");
prt("Expr * Expr");
prt("Expr & Expr");
prt("Expr && Expr");
prt("Expr % Expr");
prt("Expr + Expr");
prt("FormalParam");
prt("FormalParamList");
prt("FunctionBody");
prt("FunctionDecl");
prt("FunctionInvocation");
prt("FunctionInvocationStmt");
prt("IfThenElseStmt");
prt("IfThenStmt");
prt("Literal");
prt("NormalEvent");
prt("PrimitivePat");
prt("PrimitivePatWithCond");
prt("RefExpr");
prt("ReturnStmt");
prt("Rule");
prt("Spec");
prt("Type");
prt("Type");
prt("Type");}
prt("VariableDecl");
prt("VariableDeclWithInit");
