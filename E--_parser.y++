%{
#include <iostream>
extern int yylex();
extern void yyerror(const char *s);
extern void errMsg(const char *s);
#define prt(x) cout << x << endl;
using namespace std;
%}

%union{
   char* cVal;
   unsigned int uVal;
   double dblVal;
};

/* Operators */

%token TOK_LEX_ERROR TOK_PAT_STAR TOK_PAT_OR TOK_PAT_NOT
%token TOK_PLUS TOK_MINUS TOK_UMINUS TOK_MULT TOK_DIV TOK_MOD 
%token TOK_BITAND TOK_BITOR TOK_BITNOT TOK_BITXOR TOK_SHL TOK_SHR 
%token TOK_GT TOK_LT TOK_GE TOK_LE TOK_EQ  TOK_NE TOK_AND TOK_OR TOK_NOT 
%token TOK_COMMA TOK_ASSIGN TOK_SEMICOLON TOK_COLON TOK_ARROW
%token TOK_LBRACE TOK_RBRACE TOK_LPAREN TOK_RPAREN

/* Key words */

%token TOK_IF TOK_ELSE TOK_CLASS TOK_RETURN TOK_EVENT TOK_ANY TOK_PRINT 
%token TOK_ULONGNUM TOK_UINTNUM TOK_DOUBLENUM TOK_VOID TOK_STRING TOK_STRCONST 
%token TOK_INT TOK_UNSIGNED TOK_BOOL TOK_BYTE TOK_DOUBLE TOK_SHORT
%token TOK_LONG TOK_TRUE TOK_FALSE TOK_IDENT

/*********************   Precedence and Associativity    ********************/


/**************************************************************************/

%start specification
%%

specification: ifc_decl_star rule_star {
	prt("Spec");
};

ifc_decl_star: /* empty */ {
}
| ifc_decl_star ifc_decl {}
| ifc_decl_star error TOK_SEMICOLON {
	errMsg("Syntax error, expecting a declaration");
}
;

ifc_decl: TOK_SEMICOLON /* Fill in the other rules */ {}
| class_decl {}
| func_decl {}
| event_decl {}
| var_decl {}
;

class_decl: TOK_CLASS TOK_IDENT TOK_SEMICOLON {}
;

func_decl: type TOK_IDENT TOK_LPAREN formal_param TOK_RPAREN TOK_SEMICOLON {} /* function without a body */
| type TOK_IDENT TOK_LPAREN formal_param TOK_RPAREN func_body {} /* function with a body, but no ending semicolon */
| type TOK_IDENT TOK_LPAREN formal_param TOK_RPAREN func_body TOK_SEMICOLON {} /* function with a body, and a ending semicolon */
;

type: base_type {}
| type_name {}
;

base_type: basic_type {}
| TOK_UNSIGNED basic_type {}
;

basic_type: TOK_VOID {}
| TOK_BOOL {}
| TOK_STRING {}
| TOK_BYTE {}
| TOK_INT {}
| TOK_LONG {}
| TOK_DOUBLE {}
;

type_name: TOK_IDENT {} /* TODO: not sure what does type_name means, a class name, or something else ? */
;

func_body: TOK_LBRACE var_decl_star stmt stmt_star TOK_RBRACE {} /* TODO: let's suppose variable declarations should comes before statements */
;

var_decl_star: /* empty */ {}
| var_decl_star var_decl {}
;

stmt_star: /* empty */ {}
| stmt_star stmt {}
;

event_decl: TOK_EVENT TOK_IDENT TOK_LPAREN formal_param TOK_RPAREN {}
; 

var_decl: type var_list TOK_SEMICOLON {}
;

var_list: var_name {}
| var_list TOK_COMMA var_name {}
;

var_name: TOK_ID {}
| TOK_ID TOK_ASSIGN expr {}
;

/**
 * 09/27/2016 5:14PM
 * To be completed:
 *     expr, stmt, formal_param
 */

rule_star: /* fill in */
;

%%
