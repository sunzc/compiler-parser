%{
#include <iostream>
extern int yylex();
extern void yyerror(const char *s);
extern void errMsg(const char *s);
#define prt(x) cout << x << endl;
using namespace std;
%}

%union{
   char* cVal;
   unsigned int uVal;
   double dblVal;
};

/* Operators */

%token TOK_LEX_ERROR TOK_PAT_STAR TOK_PAT_OR TOK_PAT_NOT
%token TOK_PLUS TOK_MINUS TOK_UMINUS TOK_MULT TOK_DIV TOK_MOD 
%token TOK_BITAND TOK_BITOR TOK_BITNOT TOK_BITXOR TOK_SHL TOK_SHR 
%token TOK_GT TOK_LT TOK_GE TOK_LE TOK_EQ  TOK_NE TOK_AND TOK_OR TOK_NOT 
%token TOK_COMMA TOK_ASSIGN TOK_SEMICOLON TOK_COLON TOK_ARROW
%token TOK_LBRACE TOK_RBRACE TOK_LPAREN TOK_RPAREN
/* Key words */

%token TOK_IF TOK_ELSE TOK_CLASS TOK_RETURN TOK_EVENT TOK_ANY TOK_PRINT 
%token TOK_ULONGNUM TOK_UINTNUM TOK_DOUBLENUM TOK_VOID TOK_STRING TOK_STRCONST 
%token TOK_INT TOK_UNSIGNED TOK_BOOL TOK_BYTE TOK_DOUBLE TOK_SHORT
%token TOK_LONG TOK_TRUE TOK_FALSE TOK_IDENT

/*********************   Precedence and Associativity    ********************/
%nonassoc TOK_ASSIGN
%left TOK_PAT_OR
%left TOK_COLON
%left TOK_PAT_STAR
%right TOK_PAT_NOT
%left TOK_OR
%left TOK_AND
%right TOK_NOT
%nonassoc TOK_EQ TOK_NE TOK_GT TOK_LT TOK_GE TOK_LE
%left TOK_BITOR TOK_BITXOR
%left TOK_BITAND
%right TOK_BITNOT
%left TOK_SHL TOK_SHR
%left TOK_PLUS TOK_MINUS
%left TOK_MULT TOK_DIV TOK_MOD
%right TOK_UMINUS

/**************************************************************************/

%start specification
%%

specification: ifc_decl_star rule_star{
	prt("Spec");
}
;

ifc_decl_star: /* empty */ {
}
| ifc_decl_star ifc_decl {}
| ifc_decl_star error TOK_SEMICOLON {
	errMsg("Syntax error, expecting a declaration");
}
;

ifc_decl: TOK_SEMICOLON /* Fill in the other rules */ {}
| class_decl {}
| event_decl {}
| var_decl {}
| func_decl {}
;

func_decl: func_decl_basic TOK_SEMICOLON {}
| func_decl_basic func_body TOK_SEMICOLON {} /* TODO: function with a body, but with ending semicolon */
;

func_decl_basic: type TOK_IDENT TOK_LPAREN formal_param_star TOK_RPAREN {
	prt("FunctionDecl");
} /* function without a body */

func_body: TOK_LBRACE var_decl_star stmt_list TOK_RBRACE {
	prt("FunctionBody");
} /* TODO: let's suppose variable declarations should comes before statements */
;

stmt_list: stmt {}
| stmt_list stmt {}
;

stmt: TOK_SEMICOLON {} /* empty statement */
| assign_stmt {}
| ret_stmt {}
| if_stmt {}
| func_invok_stmt {}
| compound_stmt {} 
| compound_stmt_without_semicolon {}
;

compound_stmt_without_semicolon: TOK_LBRACE stmt_list TOK_RBRACE{
	prt("CompoundStmt");
}
;

/* TODO : second conflict*/
compound_stmt: TOK_LBRACE stmt_list TOK_RBRACE TOK_SEMICOLON{
	prt("CompoundStmt");
}
;

func_invok_stmt: func_invok TOK_SEMICOLON {
	prt("FunctionInvocationStmt");
}
;

if_stmt: TOK_IF lp_expr_rp stmt { /* TODO : first conflict */
	prt("IfThenStmt");
}
| TOK_IF lp_expr_rp stmt TOK_ELSE stmt {
	prt("IfThenElseStmt");
}
;

lp_expr_rp: TOK_LPAREN expr TOK_RPAREN {
	prt("(Expr)");
}
;

ret_stmt: TOK_RETURN expr TOK_SEMICOLON {
	prt("RetStmt");
}
;

assign_stmt: assign TOK_SEMICOLON {
	prt("AssignStmt");
}
;

var_decl_star: /* empty */ {}
| var_decl_star var_decl {}
;

class_decl: TOK_CLASS TOK_IDENT TOK_SEMICOLON {
	prt("ClassDecl");
}
| TOK_CLASS error TOK_SEMICOLON {
	errMsg("Syntax error in class declaration: expecting class name");
}
;

event_decl: TOK_EVENT TOK_IDENT TOK_LPAREN formal_param_star TOK_RPAREN TOK_SEMICOLON {
	prt("EventDecl");
} /* TODO : does event decl allows empty parameters ? */
| TOK_EVENT error TOK_SEMICOLON{
	errMsg("Expected an event name");
}
| TOK_EVENT TOK_IDENT error TOK_SEMICOLON{ /* TODO : third conflict */
	errMsg("Error in event declaration: missing event name or \"(\"");
}
| TOK_EVENT TOK_IDENT TOK_LPAREN error TOK_SEMICOLON{
	errMsg("Error in event declaration, expecting formal parameters");
}
; 

formal_param_star: {
} /* empty parameters */
| formal_param_list {
	prt("FormalParamList");
}
;

formal_param_list : type TOK_IDENT {
	prt("FormalParam");
}
| formal_param_list TOK_COMMA type TOK_IDENT {
	prt("FormalParam");
}
;

/* TODO: type name will conflict with assignment statement */
type: TOK_IDENT {
	/* type name */
	prt("Type");
}
| basic_type {
	prt("Type");
}
| TOK_UNSIGNED basic_type {
	prt("Type");
}
;

basic_type: TOK_VOID {}
| TOK_BOOL {}
| TOK_STRING {}
| TOK_BYTE {}
| TOK_INT {}
| TOK_LONG {}
| TOK_DOUBLE {}
;

var_decl: type var_list TOK_SEMICOLON {}
| type error TOK_SEMICOLON {
	errMsg("Error in variable declaration, may be a missing identifier");
}
;

var_list: var_name {}
| var_list TOK_COMMA var_name {}
;

var_name: TOK_IDENT {
	prt("VariableDecl");
}
| TOK_IDENT TOK_ASSIGN expr {
	prt("VariableDeclWithInit");
}
;

expr: literal {
	prt("Literal");
}
| ref_expr{}
| assign {}
| TOK_MINUS expr %prec TOK_UMINUS{
	prt("-Expr");
} /* unary operator op */
| func_invok {}
| TOK_NOT expr{
	prt("!Expr");
}
| TOK_BITNOT expr{
	prt("~Expr");
}
| expr TOK_MINUS expr {
	prt("Expr - Expr");
}
| expr TOK_PLUS expr {
	prt("Expr + Expr");
}
| expr TOK_MULT expr {
	prt("Expr * Expr");
}
| expr TOK_DIV expr {
	prt("Expr / Expr");
}
| expr TOK_MOD expr {
	prt("Expr % Expr");
}
| expr TOK_AND expr {
	prt("Expr && Expr");
}
| expr TOK_OR expr {
	prt("Expr || Expr");
}
| expr TOK_GT expr {
	prt("Expr > Expr");
}
| expr TOK_LT expr {
	prt("Expr < Expr");
}
| expr TOK_EQ expr {
	prt("Expr == Expr");
}
| expr TOK_NE expr {
	prt("Expr != Expr");
}
| expr TOK_GE expr {
	prt("Expr >= Expr");
}
| expr TOK_LE expr {
	prt("Expr <= Expr");
}
| expr TOK_BITXOR expr {
	prt("Expr ^ Expr");
}
| expr TOK_BITAND expr {
	prt("Expr & Expr");
}
| expr TOK_BITOR expr {
	prt("Expr | Expr");
}
| expr TOK_SHL expr {
	prt("Expr << Expr");
}
| expr TOK_SHR expr {
	prt("Expr >> Expr");
}
| TOK_LPAREN expr TOK_RPAREN {
	prt("(Expr)");
}
;

func_invok: TOK_IDENT TOK_LPAREN expr_star TOK_RPAREN {
	prt("FunctionInvocation");
}
;

expr_star: /* empty */ {}
| expr_list {}
;

expr_list: expr {}
| expr_list TOK_COMMA expr {}
;

assign: ref_expr TOK_ASSIGN expr {
	prt("Assignment");
}
;

ref_expr: TOK_IDENT {
	prt("RefExpr");
}
;

literal: TOK_STRCONST {}
| TOK_UINTNUM {}
| TOK_ULONGNUM {}
| TOK_DOUBLENUM {}
| TOK_TRUE {}
| TOK_FALSE {}
;

rule_star: /* empty */ {
	errMsg("Must contain at least one rule");
}
| rule_list {
}
;
rule_list: rule_decl {}
| rule_list rule_decl {}
;

rule_decl: event_pattern TOK_ARROW stmt {
	prt("Rule");
} /* fill in */
;

event_pattern: primitive_pattern{
	prt("PrimitivePat");
}
| primitive_pattern_with_cond{
	prt("PrimitivePatWithCond");
}
| event_pattern TOK_PAT_OR event_pattern {
	prt("EventPat \\/ EventPat");
}
| TOK_NOT event_pattern %prec TOK_PAT_NOT{
	prt("!EventPat");
}
| event_pattern TOK_COLON event_pattern {
	prt("EventPat : EventPat");
}
| event_pattern TOK_PAT_STAR {
	prt("EventPat **");
}
| TOK_LPAREN event_pattern TOK_RPAREN {
	prt("(EventPat)");
}
;

primitive_pattern_with_cond: primitive_pattern TOK_BITOR expr {}
;

primitive_pattern: TOK_ANY {
	prt("anyEvent");
} /* TODO: should TOK_ANY be included in a computation ? */
| TOK_IDENT TOK_LPAREN param_star TOK_RPAREN {
	prt("NormalEvent");
}
;
param_star: /* empty */ {
}
| param_list {}
;

param_list: TOK_IDENT {
	prt("EventFormalParam");
} /* TODO not sure whether empty param is allowed or not in event */ 
| param_list TOK_COMMA TOK_IDENT {
	prt("EventFormalParam");
}
;
%%
